# -*- coding: utf-8 -*-
"""Copy of LSTM Google Stock Price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xpVJEztvJzlqXy9N87Z-mhVu1X3RIHvJ

# Define the problem

You have five years of google stock price, your job is to predict the next stock price

# Obtain Data
"""

!wget https://www.dropbox.com/s/m6xpec59d3o757t/GoogleStockPrice.zip -q

!unzip GoogleStockPrice.zip

ls -l

"""# Analyze the data"""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the training set
train_pd = pd.read_csv('Google_Stock_Price_Train.csv')

train_pd.info()

train_pd.head()

train_pd.tail()

# Importing the test set
test_pd = pd.read_csv('Google_Stock_Price_Test.csv')

test_pd.head()

test_pd.tail()

train_pd['Open'].plot(color='k')

test_pd['Open'].plot(color='k')

"""# Feature Engineering"""

training_set = train_pd.iloc[:, 1:2].values
print(training_set)

# Feature Scaling
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))

print(sc.data_max_,sc.data_min_,sc.data_range_)

training_set_scaled = sc.fit_transform(training_set)

print(sc.data_max_,sc.data_min_,sc.data_range_)

training_set_scaled.shape

m = training_set_scaled.shape[0]

m

# Creating a data structure with 60 timesteps and 1 output
X_train = []
y_train = []
for i in range(60, m):
    X_train.append(training_set_scaled[i-60:i, 0])
    y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

x_train[0]

X_train.shape

# Reshaping
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

X_train.shape

X_train[0]

"""# Build the Model"""

# Part 2 - Building the RNN / LSTM

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

# Initialising the RNN
regressor = Sequential()

# Adding the first LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 64, return_sequences = True, input_shape = (X_train.shape[1], X_train.shape[2]))
regressor.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 64, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 64, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 64))
regressor.add(Dropout(0.2))

# Adding the output layer
regressor.add(Dense(units = 1))

# Compiling the RNN
# learning rate is defined in the default paramater for "Adam"
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error') # RMSprop could also be used for RNN
# https://keras.io/optimizers/

regressor.summary()

# Fitting the RNN to the Training set
regressor.fit(X_train, y_train, epochs = 40, batch_size = 32)



"""# Making the predictions and visualising the results"""

# Getting the real stock price of 2017
dataset_test = pd.read_csv('Google_Stock_Price_Test.csv')
real_stock_price = dataset_test.iloc[:, 1:2].values

# Getting the predicted stock price of 2017
dataset_total = pd.concat((train_pd['Open'], test_pd['Open']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(test_pd) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []

m = inputs.shape[0]
m

for i in range(60, m):
    X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

predicted_scaled_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_scaled_price)

# Visualising the results
plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()

predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

# Visualising the results
plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()

