# -*- coding: utf-8 -*-
"""Churn Detector  with ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/0B4aA5yFGpQx1NXltRk5CWVRSMFhNX1l4V2xVXzdXa2Y2R0k0

The dataset we are looking at is the measure of 10000 customers of a bank with 
- CustomerId, 
- Surname, 
- CreditScore, 
- Geography, 
- Gender, 
- Age, 
- Tenure(how long the customer has been with the bank), 
- Balance(balance of the customer at that point when the data was loaded), 
- NoOfProducts(no of produts the customer had like savings account,credit card,loan),- 
- HasCrCard(did the customer has a credit card or not), 
- IsActiveMember(is the customer an active member), 
- EstimatedSalary(estimated salary of the customer), 
- Exited(whether the person left the bank within 6 months).
"""

import keras

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

!wget https://www.dropbox.com/s/t9uil3kvmv0ypbv/Churn_Modelling.csv

ls -l

dataset = pd.read_csv('Churn_Modelling.csv')

dataset.head()

dataset.info()

X = dataset.iloc[:, 3:13].values # pick from index 3 (CreditScore - EstimateSalary) not included Exited index13
y = dataset.iloc[:, 13].values

X.shape

X[0]

y[0]

from sklearn.preprocessing import LabelEncoder, OneHotEncoder

labelencoder = LabelEncoder()

X[0]



X[:,1]  #all rows and take one column

set(X[:,1])  #looking at possible values ( France, Germany .... ) // displays Unique Values

X[:, 1] = labelencoder.fit_transform(X[:, 1]) # taking all the values at column 1st(2nd column) , take values at 0 1 and 2 and put it back into the column 1

X[0]

X[:,1]

set(X[:,1])

X[:,2]

set(X[:,2])

X[:, 2] = labelencoder.fit_transform(X[:, 2])

X[0]

X[:,2]

set(X[:,2])

onehotencoder = OneHotEncoder(categorical_features = [1]) # for the 1 represents 1st column

X[0]

X = onehotencoder.fit_transform(X).toarray()

type(X)

X[0]

X = X[:, 1:]

X[0]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()  # standardize to mean and variance -> mean become = 0 and standard deviation = 1

X_train = sc.fit_transform(X_train) # sc

np.std(X_train[:,2])

X_train[0]

X_test = sc.transform(X_test) # uses the scaling factors used in X_train above. So only transform must be done. No Fitting

#Now lets make ANN

# Importing the Keras libraries and packages
import keras
from keras.models import Sequential
from keras.layers import Dense

# Initialising the ANN
classifier = Sequential()

X_train.shape

# Adding the input layer and the first hidden layer
classifier.add(Dense(units = 9, kernel_initializer = 'uniform', 
                     activation = 'relu', input_dim = 11))

# Adding the second hidden layer
classifier.add(Dense(units = 10, kernel_initializer = 'uniform', activation = 'relu'))

# Adding the third hidden layer
classifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))

# Adding the output layer
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

# Compiling the ANN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

classifier.summary()

# Fitting the ANN to the Training set
classifier.fit(X_train, y_train, batch_size = 2000, epochs = 20)

#Part 3 - Making predictions and evaluating the model

# Predicting the Test set results
y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

new_prediction = classifier.predict(sc.transform(np.array([[0.0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]])))
new_prediction = (new_prediction > 0.5)
new_prediction

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

cm

